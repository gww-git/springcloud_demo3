eureka 包含两个组件， eureka Server和 eureka Client
各个节点启动后，会在eureka server中注册，这样eureka server的服务注册表中会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到

eureka client 是一个java客户端，用于简化eureka server的交互，客户端同时也具备一个内置，使用轮询(roubd-robin)负载算法的负载均衡器，在启动后，
会向eureka server发送心跳(默认周期30秒)，如果eureks server在多个心跳周期内没有接收到某个节点的心跳，eureka server将会从服务注册表中把该服务移除(默认90秒)


当服务端注册到Eureka后，服务名称是可以点击的，默认访问的是info,但是访问后是error page,因此要做一些配置
相当于是微服务的说明，
  1. 在需要的服务里添加坐标，目前项目，8001端口所在的项目需要添加
     <!-- actuator监控信息完善 -->
     		<dependency>
     			<groupId>org.springframework.boot</groupId>
     			<artifactId>spring-boot-starter-actuator</artifactId>
     		</dependency>

   2.父工程则需要添加插件，来支持
   3.最后在子项目8001的yml文件处添加如下信息
     info:
       app.name: microservicecloud-dept
       company.name: com.sz
       build.artifactId: $project.artifactId$
       build.version: $project.version$
       这是属于自身服务描述，自定义


 Eureka的自我保护机制，
   当注册进Eureka的微服务，在规定的时间内，没有被访问，Eureka不会删除该微服务实例，而是会保存，也就是进入了自我保护
   当该微服务重新获得心跳，eureka接收到了心跳，则会退出自我保护，（默认时间90秒）


   服务暴露
     让注册在Eureka的微服务可以被其他服务访问，也就是 暴露出来
     在8001服务的启动类上加上该注释
     @EnableDiscoveryClient// 服务发现

     然后我们在服务提供方的controller哪里自己先调用一下自己的数据
     首先注入一个成员属性
      @Autowired
         private DiscoveryClient client;

      然后提供一个方法调用
        @RequestMapping(value = "/discovery")
          @ResponseBody
          public Object discovery()
          {
              List<String> list = client.getServices();
              System.out.println("**********" + list);

              List<ServiceInstance> srvList = client.getInstances("microservicecloud-dept");//查询又没有这个名称的微服务
              for (ServiceInstance element : srvList) {
                  System.out.println(element.getServiceId() + "\t" + element.getHost() + "\t" + element.getPort() + "\t"
                          + element.getUri());
              }  //打印服务名称，地址，端口，链接
              return this.client;
          }
          根据个人来打印

          当然，这是服务提供方自己调自己的信息，服务发现，我们应该要让消费端的服务也能够调用
          在当前demo中，80端口服务是充当了一个服务消费端
          在他的Cotroller里面
          我们也提供一个方法来调用，注意，这是直接调用的消费方法controller的方法
            @ResponseBody
              @RequestMapping("/dep")
              public Object dep(){
                  return restTemplate.getForObject(PROVIDE_HTTP+"/admin/discovery", Object.class);
              }


